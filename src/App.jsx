import React, { useEffect } from 'react';
import { useCarouselStore } from './store';
import './App.css';

function App() {
  const {
    text,
    config,
    slides,
    canvases,
    isGenerating,
    validation,
    stats,
    setText,
    updateConfig,
    setTheme,
    setFormat,
    generate,
    copySlide,
    downloadSlide,
    downloadAll,
    getThemes,
    loadDraft
  } = useCarouselStore();

  const themes = getThemes();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDraft();
  }, []);

  return (
    <div className="app">
      <header className="header">
        <h1>üì± Instagram Carousel Generator</h1>
        <p className="subtitle">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏ –∑–∞ –º–∏–Ω—É—Ç—ã</p>
      </header>

      <div className="layout">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –í–≤–æ–¥ */}
        <div className="input-panel">
          <div className="card">
            <h2 className="card-title">–ö–æ–Ω—Ç–µ–Ω—Ç</h2>

            <div className="quick-tips">
              <h4>üí° –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:</h4>
              <ul>
                <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **—Ç–µ–∫—Å—Ç** –¥–ª—è –∑–µ–ª—ë–Ω–æ–≥–æ –±—ç–¥–∂–∞</li>
                <li>–†–∞–∑–¥–µ–ª—è–π—Ç–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π</li>
                <li>–¢–µ–∫—Å—Ç –≤ –±—ç–¥–∂–µ –±—É–¥–µ—Ç –ó–ê–ì–õ–ê–í–ù–´–ú–ò</li>
              </ul>
            </div>

            <div className="form-group">
              <label>–¢–µ–∫—Å—Ç –∫–∞—Ä—É—Å–µ–ª–∏</label>
              <span className="help-text">
                –†–∞–∑–¥–µ–ª—è–π—Ç–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π (Enter –¥–≤–∞ —Ä–∞–∑–∞)
              </span>
              <textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder={`**–Ω–µ –≤–∫–ª—é—á–∞–µ–º** —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞.

–ü–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –ø—Ä–æ—Å–∏–º —É–±—Ä–∞—Ç—å –ø–∞—Ä–æ–ª—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Äî —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ.

**–≤–∞–∂–Ω–æ** –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–µ–º–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã–∫—É–ø–∞.`}
                rows={12}
              />
              <div className={`char-counter ${text.length > 5000 ? 'warning' : ''}`}>
                {text.length} / 5000 —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>

            <div className="settings-grid">
              <div className="form-group">
                <label>Username</label>
                <input
                  type="text"
                  value={config.username}
                  onChange={(e) => updateConfig({ username: e.target.value })}
                  placeholder="@username"
                />
              </div>

              <div className="form-group">
                <label>–ü–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É</label>
                <input
                  type="text"
                  value={config.footer}
                  onChange={(e) => updateConfig({ footer: e.target.value })}
                  placeholder="–¢–µ–∫—Å—Ç"
                />
              </div>
            </div>

            <div className="form-group">
              <label>–®–∞–±–ª–æ–Ω –¥–∏–∑–∞–π–Ω–∞</label>
              <div className="theme-selector">
                {themes.map((theme) => (
                  <div
                    key={theme.id}
                    className={`theme-option ${config.theme === theme.id ? 'active' : ''}`}
                    onClick={() => setTheme(theme.id)}
                  >
                    <div
                      className="theme-preview"
                      style={{ background: theme.preview.badge }}
                    />
                    <div className="theme-name">{theme.name}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="form-group">
              <label>–§–æ—Ä–º–∞—Ç —Å–ª–∞–π–¥–æ–≤</label>
              <div className="format-selector">
                <button
                  className={`format-option ${config.format === 'square' ? 'active' : ''}`}
                  onClick={() => setFormat('square')}
                  type="button"
                >
                  <div className="format-preview square">
                    <div className="format-icon">1:1</div>
                  </div>
                  <span>–ö–≤–∞–¥—Ä–∞—Ç</span>
                  <span className="format-size">1080√ó1080</span>
                </button>

                <button
                  className={`format-option ${config.format === 'portrait' ? 'active' : ''}`}
                  onClick={() => setFormat('portrait')}
                  type="button"
                >
                  <div className="format-preview portrait">
                    <div className="format-icon">4:5</div>
                  </div>
                  <span>–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π</span>
                  <span className="format-size">1080√ó1350</span>
                </button>
              </div>
            </div>

            <button
              className="btn btn-primary"
              onClick={generate}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <span className="loading"></span> –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...
                </>
              ) : (
                '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å'
              )}
            </button>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ü—Ä–µ–≤—å—é */}
        <div className="output-panel">
          <div className="card">
            <h2 className="card-title">–ü—Ä–µ–≤—å—é</h2>

            {/* Validation Messages */}
            {(validation.errors.length > 0 || validation.warnings.length > 0) && (
              <div className="validation-messages">
                {validation.errors.map((error, i) => (
                  <div key={i} className="validation-message error">
                    ‚ùå {error}
                  </div>
                ))}
                {validation.warnings.map((warning, i) => (
                  <div key={i} className="validation-message warning">
                    ‚ö†Ô∏è {warning}
                  </div>
                ))}
              </div>
            )}

            {/* Stats */}
            {canvases.length > 0 && (
              <div className="stats">
                <div className="stat-card">
                  <div className="stat-value">{stats.slideCount}</div>
                  <div className="stat-label">–°–ª–∞–π–¥–æ–≤</div>
                </div>
              </div>
            )}

            {/* Slides Preview */}
            {canvases.length === 0 ? (
              <div className="empty-state">
                <div className="empty-state-icon">üìù</div>
                <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"</p>
              </div>
            ) : (
              <>
                <div className="slides-preview">
                  {canvases.map((canvas, index) => (
                    <SlideCard
                      key={index}
                      canvas={canvas}
                      index={index}
                      onCopy={() => copySlide(index)}
                      onDownload={() => downloadSlide(index)}
                    />
                  ))}
                </div>

                <button
                  className="btn btn-secondary"
                  onClick={downloadAll}
                  style={{ marginTop: '20px' }}
                >
                  üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Å–ª–∞–π–¥—ã
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–∞–π–¥–∞
function SlideCard({ canvas, index, onCopy, onDownload }) {
  const canvasRef = React.useRef(null);

  useEffect(() => {
    if (canvasRef.current && canvas) {
      const ctx = canvasRef.current.getContext('2d');
      canvasRef.current.width = canvas.width;
      canvasRef.current.height = canvas.height;
      ctx.drawImage(canvas, 0, 0);
    }
  }, [canvas]);

  const handleCopy = async () => {
    const result = await onCopy();
    if (result?.success) {
      showToast('‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
    } else {
      showToast('‚ö†Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–°–∫–∞—á–∞—Ç—å"', 'warning');
      onDownload();
    }
  };

  return (
    <div className="slide-item">
      <canvas ref={canvasRef} />
      <div className="slide-actions">
        <button onClick={handleCopy}>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        <button onClick={onDownload}>‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å</button>
      </div>
    </div>
  );
}

// Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message, type = 'info') {
  const toast = document.getElementById('toast');
  if (toast) {
    toast.textContent = message;
    toast.className = `toast ${type} show`;
    setTimeout(() => {
      toast.classList.remove('show');
    }, 3000);
  }
}

export default App;
